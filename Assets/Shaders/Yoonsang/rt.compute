// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
float2 _PixelOffset;
float4 _Time;
float4 _DirectionalLight;
//uint _ScreenDimensionX;
//uint _ScreenDimensionY;
//float4 _ScreenPixelPos;
int _Bounces;

static const float PI2 = 6.28318528f;
static const float PI = 3.14159265f;
static const int EPS = 1e-8;

struct Ray {
  float3 origin;
  float3 direction;
  float3 energy;
};

struct RayHit {
  float3 position;
  float distance;
  float3 normal;
  float3 albedo;
  float3 specular;
  float3 emission;
};

struct Sphere {
  float3 position;
  float radius;
  float3 albedo;
  float3 specular;
  float3 emission;
};

StructuredBuffer<Sphere> _Spheres;

struct MeshObject {
  float4x4 localToWorldMatrix;
  int indices_offset;
  int indices_count;
  int use_vertex_color;
  int padding;
};

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;
StructuredBuffer<float3> _Colors;

//
//  Functions.
//

Ray CreateRay(float3 origin, float direction);
RayHit CreateRayHit();
Ray CreateCameraRay(float2 uv);
void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere);
bool IntersectTriangle_MT97_internal(Ray ray, float3x3 vtx, inout float3 tuv, int useCull);
void IntersectMesh(Ray ray, inout RayHit bestHit, MeshObject mesh, int round);
RayHit Trace(Ray ray);
float3 Shade(inout Ray ray, RayHit hit);

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
  uint width, height;
  _Result.GetDimensions(width, height);
  //Transform pixel to [-1, 1] range.
  float2 uv = float2( ( id.xy + _PixelOffset ) / float2( width, height ) * 2.0f - 1.0f );
  // Get a ray for the UVs.
  Ray ray = CreateCameraRay(uv);
  // Trace and shade.
  float3 res = ( float3 )0;
  for (int i = 0; i < _Bounces; ++i) {
    RayHit hit = Trace(ray);
    res += ray.energy * Shade(ray, hit);
    // any() : True if any components of the x parameter are non-zero; otherwise, false.
    if (!any(ray.energy))
      break;
  }
  _Result[id.xy] = float4( res, 1.0 );
}

Ray CreateRay(float3 origin, float3 direction) {
  Ray ray;
  ray.energy = float3( 1.0, 1.0, 1.0 );
  ray.origin = origin;
  ray.direction = direction;
  return ray;
}


RayHit CreateRayHit() {
  RayHit hit;
  hit.position = float3( 0.0, 0.0, 0.0 );
  hit.distance = 1.#INF;
  hit.normal = float3( 0.0, 0.0, 0.0 );
  hit.albedo = float3( 0.0, 0.0, 0.0 );
  hit.specular = float3( 0.0, 0.0, 0.0 );
  hit.emission = float3( 0.0, 0.0, 0.0 );
  return hit;
}

Ray CreateCameraRay(float2 uv) {
  // Transform the camera origin to world space.
  float3 origin = mul(_CameraToWorld, float4( 0.0f, 0.0f, 0.0f, 1.0f )).xyz;
  // Invert the perspective projection of the view-space position.
  float3 direction = mul(_CameraInverseProjection, float4( uv, 0.0f, 1.0f )).xyz;
  //Transform the direction from camera to world space and normalize.
  direction = normalize(mul(_CameraToWorld, float4( direction, 0.0f )).xyz);
  return CreateRay(origin, direction);
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) {
  // Calculate distance along the ray where the sphere is intersected.
  float3 d = ray.origin - sphere.position;
  float p1 = -dot(ray.direction, d);
  float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
  if (p2sqr < 0) return;
  float p2 = sqrt(p2sqr);
  float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
  if (t > 0 && t < bestHit.distance) {
    bestHit.distance = t;
    bestHit.position = ray.origin + t * ray.direction;
    bestHit.normal = normalize(bestHit.position - sphere.position);
    bestHit.albedo = sphere.albedo;
    bestHit.specular = sphere.specular;
    bestHit.emission = sphere.emission;
  }
}

bool IntersectTriangle_MT97_internal(Ray ray, float3x3 vtx, inout float3 tuv, int useCull) {
  // find vectors for two edges sharing vert0.
  float3 edge1 = vtx[1] - vtx[0];
  float3 edge2 = vtx[2] - vtx[0];
  // begin calculating determinant - also used to calculate U parameter.
  float3 pvec = cross(ray.direction, edge2);
  // if determinant is near zero, ray lies in plane of triangle.
  float dter = dot(edge1, pvec);
  // use backface culling.
  /*if (useCull == 0) {
    if (dter < EPS) {
      return false;
    }
  }*/

  /*if (useCull == 0) {
    if (dter > EPS) {
      return false;
    }
  }*/

  if (dter < EPS) {
    return false;
  }

  float inv_dter = 1.0f / dter;
  // calculate distance from vtx[0] to ray origin.
  float3 tvec = ray.origin - vtx[0];
  // calculate U paramter and test bounds.
  tuv.y = dot(tvec, pvec) * inv_dter;
  if (tuv.y < 0.0 || tuv.y > 1.0) {
    return false;
  }
  // prepare to test v pararmeter.
  float3 qvec = cross(tvec, edge1);
  // calculate v parameter and test bounds.
  tuv.z = dot(ray.direction, qvec) * inv_dter;
  if (tuv.z < 0.0 || tuv.y + tuv.z > 1.0) {
    return false;
  }
  // calculate t, ray intersects triangle.
  tuv.x = dot(edge2, qvec) * inv_dter;
  return true;
}

void IntersectMesh(Ray ray, inout RayHit bestHit, MeshObject mesh, int round) {
  uint offset = mesh.indices_offset;
  uint count = mesh.indices_count + offset;

  for (uint i = offset; i < count; i += 3) {
    float3x3 vtx = float3x3( mul(mesh.localToWorldMatrix, float4( _Vertices[_Indices[i]], 1 )).xyz,
                            mul(mesh.localToWorldMatrix, float4( _Vertices[_Indices[i + 1]], 1 )).xyz,
                            mul(mesh.localToWorldMatrix, float4( _Vertices[_Indices[i + 2]], 1 )).xyz );

    float3 tuv = ( float3 )0;
    if (IntersectTriangle_MT97_internal(ray, vtx, tuv, mesh.use_vertex_color)) {
      if (tuv.x > 0 && tuv.x < bestHit.distance) {
        // get color from the interpolated.
        /*float3 averageCol = _Colors[_Indices[i]] + _Colors[_Indices[i + 1]] + _Colors[_Indices[i + 2]];
        averageCol /= 3;*/
        bestHit.distance = tuv.x;
        bestHit.position = ray.origin + tuv.x * ray.direction;
        bestHit.normal = normalize(cross(vtx[1] - vtx[0], vtx[2] - vtx[0]));
        //bestHit.albedo = mesh.use_vertex_color == 1 ? averageCol : float3( 0, 0.3, 0 );
        bestHit.albedo = ( float3 )0;
        bestHit.specular = 0.65f;

        bestHit.emission = mesh.use_vertex_color == 1 ? _Colors[( round + 1 ) * 3] : ( float3 )0.01;

        // constant red color for a test.
        //bestHit.emission = float3(1, 0, 0);
      }
    }
  }
}

RayHit Trace(Ray ray) {
  // Sphere sphere;
  // sphere.position = float3(3 * sin(_Time.x * 5 * PI), 3.0, 0);
  // sphere.radius = 1.0;


  // Cylinder cylinder;
  // cylinder.position = float3(5.0, 6.0, 0);
  // cylinder.radius = 2.0;
  // cylinder.height = 6.0;
  // cylinder.top_position = float3(cylinder.position.x + cylinder.height,
  //                               cylinder.position.y + cylinder.height,
  //                               cylinder.position.z + cylinder.height);

  // Cone cone;
  // cone.position = float3 (0, 0, 8);
  // cone.height = 5.0;
  // cone.radius = 2.5;

  RayHit bestHit = CreateRayHit();
  uint count, stride;

  /*
  _Spheres.GetDimensions(count, stride);
  for (uint j = 0; j < count; ++j) {
    IntersectSphere(ray, bestHit, _Spheres[j]);
  }*/

  _MeshObjects.GetDimensions(count, stride);
  for (uint i = 0; i < count; ++i) {
    IntersectMesh(ray, bestHit, _MeshObjects[i], i);
  }

  // IntersectSphere(ray, bestHit, sphere);
  // sphere.position.x = 3 * sin(_Time.y * PI);
  // sphere.position.y += 3.0;
  // IntersectSphere(ray, bestHit, sphere);
  // sphere.position.x = 3 * sin(_Time.x * 8 * PI);
  // sphere.position.y += 3.0;
  // IntersectSphere(ray, bestHit, sphere);

  //IntersectCone(ray, bestHit, cone);

  //IntersectGroundPlane(ray, bestHit);

  // Trace single triangle.
  // float3 v0 = float3(-150, 0, -150);
  // float3 v1 = float3(150, 0, -150);
  // float3 v2 = float3(0, 150 * sqrt(2), -150);
  // float t = 0.0, u = 0.0, v = 0.0;
  // IntersectTriangle(ray, bestHit, float3x3(v0, v1, v2), float3(t, u, v));
  return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit) {
  // Less than Infinity!
  if (hit.distance < 1.#INF) {
    float3 spec = float3( 0.6, 0.6, 0.6 );
    // Reflect the ray and multiply energy with specular reflection.
    ray.origin = hit.position + hit.normal * 0.001;
    ray.direction = reflect(ray.direction, hit.normal);
    ray.energy *= hit.specular;

    // bool useShadow = false;
    // Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001, -1 * _DirectionalLight.xyz);
    // RayHit shadowHit = Trace(shadowRay);
    // if (shadowHit.distance != 1.#INF) {
    //   return float3(0.0, 0.0, 0.0);
    // }

    // saturate() : The x parameter, clamped within the range of 0 to 1.
    //return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w + hit.emission;
    return hit.emission;
  } else {
    // Erase the ray's energy - the sky doesn't reflect anything.
    ray.energy = ( float3 )0.0;
    // 1. Sample the skybox and write it.
    float theta = acos(ray.direction.y) / -PI;
    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5;
    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2( phi, theta ), 0).xyz;

    // 2. draw with constant Black color.
    //return ( float3 )0;
  }
}
